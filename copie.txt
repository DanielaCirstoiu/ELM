32
A2 2
1+25*i 40*i -15*i 1-24*i
B2 2
28+15*i 39+21*i -18-10*i -25-14*i
A3 3
3-i 2+2*i -3-i -10 6 0 14+i -12-2*i 3+i
B3 3
7-5*i 12-7*i 4-6*i -3 -4 -3 5*i -2+7*i 3+6*i
A4 4
1918-100*i 4372-225*i 1758-100*i 7279-400*i
-688+36*i -1568+81*i -632+36*i -2612+144*i
-82+4*i -187+9*i -72+4*i -314+16*i
-71+4*i -162+9*i -65+4*i -268+16*i
B4 4
-1189+100*i -2646+225*i -3654+100*i -2337+350*i
430-36*i 957-81*i 1322-36*i 844-126*i
41-4*i 91-9*i 128-4*i 81-14*i
53-4*i 118-9*i 159-4*i 107-14*i

A2 2
801 1280 -480 -767
B2 2
508 711 -338 -473
A3 3
-29 66 -35 -10 6 0 46 -76 35
B3 3
-153 -212 -188 -3 -4 -3 160 222 195
A4 4
-1282 -2828 -1442 -5521 464 1024 520 1996
46 101 56 198 57 126 63 244
B4 4
2011 4554 -454 8863 -722 -1635 170 -3188
-87 -197 0 -367 -75 -170 31 -341


/// Rezolva sistem
        public Matrix rezolva_sistem(Matrix a)
        {
            // return x = A^-1 b, assuming a is square and has full rank
              if (m!= n || a.m != n || a.n != 1)
                    throw new Exception("Illegal matrix dimensions.");

                // create copies of the data
                Matrix A = new Matrix(this);
                Matrix b = new Matrix(a);

                // Gaussian elimination with partial pivoting
                for (int i = 0; i < n; i++)
                {

                    // find pivot row and swap
                    int max = i;
                    for (int j = i + 1; j < n; j++)
                        if (Math.Abs(A._matrix[j,i]) > Math.Abs(A._matrix[max,i]))
                            max = j;
                    A.swap(i, max);
                    b.swap(i, max);

                    // singular
                    if (A._matrix[i,i] == 0.0) throw new Exception("Matrix is singular.");

                    // pivot within b
                    for (int j = i + 1; j < n; j++)
                        b._matrix[j,0] -= b._matrix[i,0] * A._matrix[j,i] / A._matrix[i,i];

                    // pivot within A
                    for (int j = i + 1; j < n; j++)
                    {
                        double m = A._matrix[j,i] / A._matrix[i,i];
                        for (int k = i + 1; k < n; k++)
                        {
                            A._matrix[j,k] -= A._matrix[i,k] * m;
                        }
                        A._matrix[j,i] = 0.0;
                    }
                }

                // back substitution
                Matrix x = new Matrix(n, 1);
                for (int j = n - 1; j >= 0; j--)
                {
                    double t = 0.0;
                    for (int k = j + 1; k < n; k++)
                        t += A._matrix[j,k] * x._matrix[k,0];
                    x._matrix[j,0] = (b._matrix[j,0] - t) / A._matrix[j,j];
                }
                return x;

            }  